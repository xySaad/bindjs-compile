import { state, list } from "rbind";

const adjectives = ["pretty", "large", "big", "small", "tall", "short", "long", "handsome", "plain", "quaint", "clean", "elegant", "easy", "angry", "crazy", "helpful", "mushy", "odd", "unsightly", "adorable", "important", "inexpensive", "cheap", "expensive", "fancy"]; // prettier-ignore
const colors = ["red", "yellow", "blue", "green", "pink", "brown", "purple", "brown", "white", "black", "orange"]; // prettier-ignore
const nouns = ["table", "chair", "house", "bbq", "desk", "car", "pony", "cookie", "sandwich", "burger", "pizza", "mouse", "keyboard"]; // prettier-ignore

const random = (max) => Math.round(Math.random() * 1000) % max;

let nextId = 1;

const buildData = (count) => {
  let data = Array.from({ length: count });

  for (let i = 0; i < count; i++) {
    ref label = `${adjectives[random(adjectives.length)]} ${colors[random(colors.length)]} ${nouns[random(nouns.length)]}`

    data[i] = { id: nextId++, label };
  }

  return data;
};
ref data = [];

ref selected = null;

const run = () => {
  data = [...buildData(1_000)];
};
const runLots = () => {
  data = [...buildData(10_000)];
};
const add = () => data.push(...buildData(1_000));
const update = () => {
  for (let i = 0, d = data, len = d.length; i < len; i += 10) {
    d[i].label += " !!!";
  }
};
const swapRows = () => {
  if (data.length > 998) {
    const first = data[1];
    const _998 = data[998];
    data.batch(() => {
      data[1] = _998;
      data[998] = first;
    });
  }
};

const Button = ([id, text, fn]) => (
  <div class="col-sm-6 smallpad">
    <button
      id={id}
      class="btn btn-primary btn-block"
      type="button"
      onclick={fn}
    >
      {text}
    </button>
  </div>
);

export const App = () => (
  <div class="container">
    <div class="jumbotron">
      <div class="row">
        <div class="col-md-6">
          <h1>rbind</h1>
        </div>
        <div class="col-md-6">
          <div class="row">
            <Button id="run" text="Create 1,000 rows" fn={run} />
            <Button id="runlots" text="Create 10,000 rows" fn={runLots} />
            <Button id="add" text="Append 1,000 rows" fn={add} />
            <Button id="update" text="Update every 10th row" fn={update} />
            <Button id="clear" text="Clear" fn={() => data.clear()} />
            <Button id="swaprows" text="Swap Rows" fn={swapRows} />
          </div>
        </div>
      </div>
    </div>
    <table class="table table-hover table-striped test-data">
      <tbody>
        {data.map((row, idx) => {
          return (
            <tr class={selected == row.id ? "danger" : ""}>
              <td class="col-md-1">{row.id}</td>
              <td class="col-md-4">
                {/* <a onclick={() => (selected = row.id)}>{#row.label}</a> */}
                <a onclick={() => (selected = row.id)}>{row.label}</a>
              </td>
              <td class="col-md-1">
                <a onclick={() => data.remove(idx())}>
                  <span class="glyphicon glyphicon-remove" aria-hidden="true" />
                </a>
              </td>
              <td class="col-md-6" />
            </tr>
          );
        })}
      </tbody>
    </table>
  </div>
);
